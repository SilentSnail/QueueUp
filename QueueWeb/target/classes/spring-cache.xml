<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:${cache.ehCacheConfig}" />
        <property name="shared" value="true" />
    </bean>

    <bean id="springCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="cacheManager" />
        <!-- transactionAware表示是否事务环绕的，如果true，则如果事务回滚，缓存也回滚，默认false。 -->
        <!-- http://jinnianshilongnian.iteye.com/blog/2001040 -->
        <property name="transactionAware" value="true" />
    </bean>

    <!--添加基于注解支持-->
    <cache:annotation-driven cache-manager="springCacheManager"/>

    <!-- 邮件线程池配置 -->
    <bean id="mailService" class="com.queue.mail.service.MailMessageService" scope="singleton" init-method="init">
        <property name="poolSize" value="5"/><!-- 线程池初始大小 -->
        <property name="maxPoolSize" value="10" /><!-- 线程池最大大小 -->
        <property name="keepLiveTime" value="50" /><!-- 链接空闲保持时间 -->
        <property name="unit" value="SECONDS" /><!-- 链接空闲保持时间单位 -->
    </bean>

    <!-- redis Config -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxWaitMillis" value="${redis.maxWait}" />
        <property name="maxTotal" value="${redis.maxActive}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>

    <bean id="jedisPassword" class="org.springframework.data.redis.connection.RedisPassword">
        <constructor-arg name="thePassword" value="${redis.password}" />
    </bean>

    <!--配置jedis链接工厂 spring-data-redis2.0中
        构造器传入一个 RedisStandaloneConfiguration  单机
                     RedisSentinelConfiguration  主从复制
                     RedisClusterConfiguration  集群-->
    <bean id="standaloneConfig" class="org.springframework.data.redis.connection.RedisStandaloneConfiguration">
        <property name="hostName" value="${redis.host}" />
        <property name="port" value="${redis.port}" />
        <property name="password" ref="jedisPassword" />
    </bean>

    <bean id="jedisFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg name="standaloneConfig" ref="standaloneConfig" />
        <constructor-arg name="clientConfig">
            <bean class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory.MutableJedisClientConfiguration">
                <property name="clientName" value="jedisPoolConfig" />
            </bean>
        </constructor-arg>
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisFactory" />
        <property name="enableDefaultSerializer" value="false" /><!-- 是否开启Redis默认序列化方式 -->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
    </bean>
</beans>